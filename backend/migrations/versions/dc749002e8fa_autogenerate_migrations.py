"""autogenerate migrations

Revision ID: dc749002e8fa
Revises: bf95568cafff
Create Date: 2022-10-30 11:59:40.492765

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'dc749002e8fa'
down_revision = 'bf95568cafff'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE OR REPLACE "
               "VIEW products_view (id , name , `desc` , price , status , code , created_at , updated_at , total_like_count , third_floor_like_count , five_floor_like_count , eleven_floor_like_count , total_review_count, total_sales_count, third_floor_sales_count, five_floor_sales_count, eleven_floor_sales_count, main_category, middle_category, sub_category) AS "
               "WITH RECURSIVE cte(id, category) AS "
               "( "
               "    SELECT "
               "        product_categories.id AS id, "
               "        CAST(product_categories.id AS CHAR) AS category "
               "    FROM product_categories "
               "    WHERE product_categories.owner_id = 0 "
               "    UNION ALL "
               "    SELECT "
               "        product_categories.id AS id, "
               "        CONCAT(cte.category, ',', CAST(product_categories.id AS CHAR)) AS category "
               "    FROM product_categories "
               "    INNER JOIN cte ON product_categories.owner_id = cte.id " 
               ") "
               "SELECT "
               "    id, "
               "    name, "
               "    `desc`, "
               "    price, "
               "    status, " 
               "    code, "
               "    created_at, "
               "    updated_at, "
               "    ("
               "        SELECT COUNT(*) "
               "        FROM product_likes "
               "        WHERE product_likes.product_id = products.id "
               "    ) AS total_like_count, "
               "    ("
               "        SELECT COUNT(*) "
               "        FROM product_likes "
               "        WHERE product_likes.product_id = products.id "
               "            AND EXISTS ( "
               "                    SELECT 1 FROM users "
               "                    WHERE users.id = product_likes.user_id "
               "                        AND users.floor = 'ThirdFloor' "
               "                ) "
               "    ) AS third_floor_like_count, "
               "    ("
               "        SELECT COUNT(*)"
               "        FROM product_likes"
               "        WHERE product_likes.product_id = products.id"
               "            AND EXISTS ("
               "                    SELECT 1 FROM users "
               "                    WHERE users.id = product_likes.user_id"
               "                        AND users.floor = 'FiveFloor'"
               "                )"
               "    ) AS five_floor_like_count,"
               "    ("
               "        SELECT COUNT(*)"
               "        FROM product_likes"
               "        WHERE product_likes.product_id = products.id"
               "            AND EXISTS ("
               "                    SELECT 1 FROM users "
               "                    WHERE users.id = product_likes.user_id"
               "                        AND users.floor = 'ElevenFloor'"
               "                )"
               "    ) AS eleven_floor_like_count,"
               "    (SELECT COUNT(*) FROM reviews WHERE reviews.product_id = products.id) AS total_review_count,"
               "    (SELECT COUNT(*) FROM orders WHERE orders.product_id = products.id) AS total_sales_count,"
               "    ("
               "        SELECT COUNT(*) "
               "        FROM orders "
               "        WHERE orders.product_id = products.id "
               "            AND EXISTS ("
               "                    SELECT 1 FROM users "
               "                    WHERE users.id = orders.user_id "
               "                        AND users.floor = 'ThirdFloor'"
               "                )"
               "    ) AS third_floor_sales_count,"
               "    ("
               "        SELECT COUNT(*) "
               "        FROM orders "
               "        WHERE orders.product_id = products.id "
               "            AND EXISTS ("
               "                    SELECT 1 FROM users "
               "                    WHERE users.id = orders.user_id "
               "                        AND users.floor = 'FiveFloor'"
               "                )"
               "    ) AS five_floor_sales_count,"
               "    ("
               "        SELECT COUNT(*) "
               "        FROM orders "
               "        WHERE orders.product_id = products.id "
               "            AND EXISTS ("
               "                    SELECT 1 FROM users "
               "                    WHERE users.id = orders.user_id "
               "                        AND users.floor = 'ElevenFloor'"
               "                )"
               "    ) AS eleven_floor_sales_count,"
               "    ("
               "        SELECT SUBSTRING_INDEX(cte.category, ',', 1) "
               "        FROM cte "
               "        WHERE cte.id = products.product_category_id"
               "    ) AS main_category,"
               "    ("
               "        SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(cte.category, ',', -2), ',', 1) "
               "        FROM cte "
               "        WHERE cte.id = products.product_category_id"
               "    ) AS middle_category,"
               "    ("
               "        SELECT SUBSTRING_INDEX(cte.category, ',', -1) "
               "        FROM cte "
               "        WHERE cte.id = products.product_category_id"
               "    ) AS sub_category "
               "FROM products"
               )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP VIEW products_view")
